//////TWO SUM/////////////////////////////////no:1////////////////////////////////////////////////TC:O(n2)///////////////////////////////////////////////

// /**
//  * @param {number[]} nums
//  * @param {number} target
//  * @return {number[]}
//  */
// var twoSum = function(nums, target) {
//     for(let i = 0 ; i < nums.length-1 ; i++){
//         for(let j = i+1; j < nums.length;j++){
//             if(nums[i]+nums[j] === target){
//                 return [i,j]
//             }
//         }
//     }
// };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////Best time to buy and sell stock /////////////////////////////////no:121////////////////////////////////////////////////TC:O(n)///////////////////////////////////////////////

// /**
//  * @param {number[]} prices
//  * @return {number}
//  */
// var maxProfit = function(prices) {
//     let minPrice = Infinity;
//     let maxProfit = 0;

//     for(let i = 0 ; i < prices.length ; i++){
//         minPrice = Math.min(minPrice,prices[i]);
//         maxProfit = Math.max(maxProfit,prices[i]-minPrice)
//     }

//     return maxProfit;
// };  


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////Remove Duplicates from Sorted Array/////////////////////////////////no:26////////////////////////////////////////////////TC:O(n)///////////////////////////////////////////////

// /**
//  * @param {number[]} nums
//  * @return {number}
//  */
// var removeDuplicates = function(nums) {
//     let k=1;
//     for(let i = 1; i<nums.length;i++){
//         if(nums[i]!==nums[i-1]){
//             nums[k] = nums[i]
//             k++
//         }
//     } 
//     return k;
// };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////Rotate Array/////////////////////////////////no:189////////////////////////////////////////////////TC:O(n)///////////////////////////////////////////////

// /**
// //  * @param {number[]} nums
// //  * @param {number} k
// //  * @return {void} Do not return anything, modify nums in-place instead.
// //  */
// var rotate = function(nums, k) {
//     k = k % nums.length;
//    nums.splice(0,0,...nums.splice(-k,k));
// };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////Find All Numbers Disappeared in an Array/////////////////////////////////no:448////////////////////////////////////////////////TC:O(n)///////////////////////////////////////////////

// /**
//  * @param {number[]} nums
//  * @return {number[]}
//  */
// var findDisappearedNumbers = function(nums) {
//     let num = new Set(nums);
//     let result = [];
//     for(let i=1;i<=nums.length;i++){
//      if(!num.has(i)){
//          result.push(i)
//      }
//     }
//     return result;
//  };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////Move zeroes/////////////////////////////////no:283////////////////////////////////////////////////TC:O(n)///////////////////////////////////////////////

// /**
//  * @param {number[]} nums
//  * @return {void} Do not return anything, modify nums in-place instead.
//  */
// var moveZeroes = function(nums) {
//     let insertPos = 0;
//     for(let i=0;i<nums.length;i++){
//         if(nums[i]!==0){
//             nums[insertPos] = nums[i];
//             insertPos++
//         }
//     }
//     for(let i = insertPos ; i < nums.length ; i++){
//         nums[i] = 0;
//     }
// };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////Intersection of Two Arrays II/////////////////////////////////no:350////////////////////////////////////////////////TC///////////////////////////////////////////////

// /**
//  * @param {number[]} nums1
//  * @param {number[]} nums2
//  * @return {number[]}
//  */
// var intersect = function(nums1, nums2) {
//     let map = new Map();
//     let result = [];

//     for(let num of nums1){
//         map.set(num,(map.get(num)||0)+1);
//     }

//     for(let num of nums2){
//         if(map.get(num)>0){
//             result.push(num)
//         }
//         map.set(num,map.get(num)-1);
//     }
//     return result;
// };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////Valid Anagram/////////////////////////////////no:242////////////////////////////////////////////////TC///////////////////////////////////////////////

// /**
//  * @param {string} s
//  * @param {string} t
//  * @return {boolean}
//  */
// var isAnagram = function(s, t) {
//     return s.split('').sort().join() === t.split('').sort().join()
// };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
